{
  "compilerOptions": {
    // Incremental builds
    // NOTE: Enabling incremental builds speeds up `tsc`. Keep in mind though that it does not reliably bust the cache when the `tsconfig.json` file changes.
    "incremental": false,

    // Type checking
    "strict": true,
    "useDefineForClassFields": true, // Not enabled by default in `strict` mode unless we bump `target` to ES2022.
    "noFallthroughCasesInSwitch": true, // Not enabled by default in `strict` mode.
    "noImplicitReturns": true, // Not enabled by default in `strict` mode.
    "useUnknownInCatchVariables": true, // TODO: This would normally be enabled in `strict` mode but would require some adjustments to the codebase.
    "noImplicitOverride": true, // Not enabled by default in `strict` mode.
    "noUnusedLocals": true, // Not enabled by default in `strict` mode.
    "noUnusedParameters": true, // Not enabled by default in `strict` mode.
    "exactOptionalPropertyTypes": false, // Not enabled by default in `strict` mode.
    "noUncheckedIndexedAccess": true, // Not enabled by default in `strict` mode.

    // JavaScript support
    "allowJs": false,
    "checkJs": false,

    // Interop constraints
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "verbatimModuleSyntax": true,
    "importHelpers": true, // This is only used for build validation. Since we do not have `tslib` installed, this will fail if we accidentally make use of anything that'd require injection of helpers.

    // Skip type checking for node modules
    "skipLibCheck": true,

    // Language and environment
    "moduleResolution": "node",
    "module": "esnext",
    "target": "es2022",
    "types": ["node"]
  }
}
