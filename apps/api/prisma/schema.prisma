generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Partner within the Treasure ecosystem
model Project {
  // Primary key
  id String @id @default(cuid())

  // Fields
  slug         String   @unique
  name         String
  redirectUris String[] @map("redirect_uris")
  customAuth   Boolean  @default(false) @map("custom_auth")
  icon         String?
  cover        String?
  color        String?

  // Relations
  backendWallets BackendWallet[]
  callTargets    CallTarget[]

  // Computed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project")
}

// Project wallet that can be used to cover gas when desired
model BackendWallet {
  // Primary key
  id String @id @default(cuid())

  // Fields
  chainId Int
  address String

  // Relations
  projects Project[]

  // Computed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([chainId, address])
  @@map("backend_wallet")
}

// Contracts that a project user's session should have write access to
model CallTarget {
  // Primary key
  id String @id @default(cuid())

  // Fields
  chainId Int
  address String

  // Relations
  projects Project[]

  // Computed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([chainId, address])
  @@map("call_target")
}

model User {
  // Primary key
  id String @id @default(cuid())

  // Fields
  address     String    @unique @map("address") @db.VarChar(42)
  email       String?   @unique
  phoneNumber String?   @unique @map("phone_number")
  banned      Boolean   @default(false)
  comment     String?
  lastLoginAt DateTime? @map("last_login_at")

  // Relations
  profile UserProfile?

  // Computed
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  userProfileId String   @map("user_profile_id")

  @@map("user")
}

model UserProfile {
  // Primary key
  id String @id @default(cuid())

  // Fields
  // TreasureTag
  tag              String?
  discriminant     Int?      @db.SmallInt
  tagClaimed       Boolean   @default(false) @map("tag_claimed")
  tagModifiedAt    DateTime? @map("tag_modified_at")
  tagLastCheckedAt DateTime? @map("tag_last_checked_at")

  // Email security
  emailSeucirytPhrase          String?   @map("email_security_phrase")
  emailSecurityPhraseUpdatedAt DateTime? @map("email_security_phrase_updated_at")

  // Bio
  featuredNftIds        String[] @map("featured_nft_ids")
  featuredBadgeIds      String[] @map("featured_badge_ids")
  highlyFeaturedBadgeId String?  @map("highly_featured_badge_id")
  about                 String?
  pfp                   String?
  banner                String?

  // UI
  showMagicBalance Boolean @default(true) @map("show_magic_balance")
  showEthBalance   Boolean @default(true) @map("show_eth_balance")
  showGemsBalance  Boolean @default(true) @map("show_gems_balance")

  // Other
  testnetFaucetLastUsedAt DateTime? @map("testnet_faucet_last_used_at")

  // Relations
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  // Computed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([tag, discriminant])
  @@map("user_profile")
}
