generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "tracing", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "smart_account"]
}

model User {
  // Primary key
  id String @id @default(cuid())

  // Fields
  // Identifiers
  externalUserId        String? @unique @map("external_user_id")
  externalWalletAddress String? @unique @map("external_wallet_address") @db.VarChar(42)

  // Status
  lastLoginAt DateTime? @map("last_login_at")

  // Notes
  banned  Boolean @default(false)
  comment String?

  // Relations
  profile              UserProfile?
  smartAccounts        UserSmartAccount[]
  socialAccounts       UserSocialAccount[]
  notificationSettings UserNotificationSettings[]
  gemsSummary          GemsSummary?
  gemsTx               GemsTx[]
  vouchers             Voucher[]
  quests               UserQuest[]

  // Computed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
  @@schema("public")
}

model UserSmartAccount {
  // Primary key
  id String @id @default(cuid())

  // Fields
  chainId              Int     @map("chain_id")
  address              String  @db.VarChar(42)
  initialEmail         String? @map("initial_email") // Email address used to create the smart account, if applicable
  initialWalletAddress String  @map("initial_wallet_address") @db.VarChar(42) // Wallet address used to create the smart account (either EOA or ecosystem wallet)

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  // Computed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([chainId, address])
  @@index([address])
  @@index([userId])
  @@map("user_smart_account")
  @@schema("public")
}

model UserProfile {
  // Primary key
  id String @id @default(cuid())

  // Fields
  // Contact
  email String? @unique

  // TreasureTag
  tag          String?
  discriminant Int?    @db.SmallInt

  // Email security
  emailSecurityPhrase          String?   @map("email_security_phrase")
  emailSecurityPhraseUpdatedAt DateTime? @map("email_security_phrase_updated_at")

  // Bio
  featuredNftIds        String[] @map("featured_nft_ids")
  featuredBadgeIds      String[] @map("featured_badge_ids")
  highlyFeaturedBadgeId String?  @map("highly_featured_badge_id")
  about                 String?
  pfp                   String?
  banner                String?

  // UI
  showMagicBalance Boolean @default(true) @map("show_magic_balance")
  showEthBalance   Boolean @default(true) @map("show_eth_balance")
  showGemsBalance  Boolean @default(true) @map("show_gems_balance")

  // Migration
  legacyAddress           String?   @unique @map("legacy_address") @db.VarChar(42)
  legacyEmail             String?   @map("legacy_email")
  legacyEmailVerifiedAt   DateTime? @map("legacy_email_verified_at")
  legacyProfileMigratedAt DateTime? @map("legacy_profile_migrated_at")

  // Status
  testnetFaucetLastUsedAt DateTime? @map("testnet_faucet_last_used_at")

  // Relations
  userId                     String?                    @unique @map("user_id")
  user                       User?                      @relation(fields: [userId], references: [id])
  legacySocialAccounts       UserSocialAccount[]
  legacyNotificationSettings UserNotificationSettings[]
  gemsSummary                GemsSummary?
  gemsTx                     GemsTx[]
  vouchers                   Voucher[]
  quests                     UserQuest[]

  // Computed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([legacyAddress])
  @@index([legacyEmail, legacyEmailVerifiedAt])
  @@index([tag])
  @@map("user_profile")
  @@schema("public")
}

enum SocialNetwork {
  DISCORD
  STEAM
  TWITCH
  TWITTER

  @@schema("public")
}

model UserSocialAccount {
  // Primary key
  id String @id @default(cuid())

  // Fields
  network       SocialNetwork
  accountId     String        @map("account_id")
  accountName   String        @map("account_name")
  accountHandle String?       @map("account_handle")
  accountData   Json?         @map("account_data")
  isPublic      Boolean       @default(false) @map("is_public")

  // Migration
  legacyUserProfileId String?      @map("legacy_user_profile_id")
  legacyUserProfile   UserProfile? @relation(fields: [legacyUserProfileId], references: [id], onDelete: Cascade)

  // Relations
  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  // Computed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([legacyUserProfileId])
  @@index([userId])
  @@index([isPublic])
  @@map("user_social_account")
  @@schema("public")
}

enum NotificationType {
  BADGE
  BID_ACTIVITY
  ITEM_SOLD
  ITEM_PURCHASED
  MARKETING

  @@schema("public")
}

model UserNotificationSettings {
  // Primary key
  id String @id @default(cuid())

  // Fields
  type           NotificationType
  threshold      Int?
  isEnabledEmail Boolean          @default(true) @map("is_enabled_email")
  isEnabledInApp Boolean          @default(true) @map("is_enabled_in_app")

  // Migration
  legacyUserProfileId String?      @map("legacy_user_profile_id")
  legacyUserProfile   UserProfile? @relation(fields: [legacyUserProfileId], references: [id], onDelete: Cascade)

  // Relations
  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  // Computed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([type, userId])
  @@index([legacyUserProfileId])
  @@index([userId])
  @@map("user_notification_settings")
  @@schema("public")
}

model TransactionErrorLog {
  // Primary key
  id String @id @default(cuid())

  // Fields
  queueId        String   @unique @map("queue_id")
  queuedAt       DateTime @map("queued_at")
  chainId        Int      @map("chain_id")
  signerAddress  String   @map("signer_address")
  accountAddress String   @map("account_address")
  target         String
  functionName   String   @map("function_name")
  errorMessage   String   @map("error_message")

  // Computed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("transaction_error_log")
  @@schema("public")
}

// Gems.
model GemsSummary {
  // Primary key
  id String @id @default(cuid())

  // Fields
  gems         Int @default(0)
  gemsEarned   Int @default(0) @map("gems_earned")
  shards       Int @default(0)
  shardsEarned Int @default(0) @map("shards_earned")

  // Relations
  userId String? @unique @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  // Migration
  legacyUserProfileId String?      @unique @map("legacy_user_profile_id")
  legacyUserProfile   UserProfile? @relation(fields: [legacyUserProfileId], references: [id], onDelete: Cascade)

  // Computed
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([gemsEarned])
  @@map("gems_summary")
  @@schema("public")
}

model GemsTx {
  // Primary key
  id String @id @default(cuid())

  // Fields
  txId          String  @map("tx_id")
  legacyAddress String? @map("legacy_address") // Keep for historical documentation purposes.
  category      String
  amount        Int     @default(0)
  amountShards  Int     @default(0) @map("amount_shards")
  description   String
  internalNote  String? @map("internal_note")

  // Relations
  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  // Migration
  legacyUserProfileId String?      @map("legacy_user_profile_id")
  legacyUserProfile   UserProfile? @relation(fields: [legacyUserProfileId], references: [id], onDelete: Cascade)

  // Computed
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([legacyUserProfileId, txId])
  @@unique([userId, txId])
  @@index([userId, createdAt])
  @@index([legacyUserProfileId, createdAt])
  @@map("gems_tx")
  @@schema("public")
}

// Rewards/Chests/Vouchers.
enum RewardType {
  NFT
  COIN

  @@map("reward_type_enum")
  @@schema("public")
}

model Reward {
  // Primary key
  id String @id @default(cuid())

  // Fields
  rewardId     String     @unique @map("reward_id")
  type         RewardType
  subType      String?    @map("sub_type")
  chain        String
  tokenAddress String     @map("token_address")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)
  // NFT Type only
  slug         String?
  tokenId      String?    @map("token_id")
  quantity     Int?
  // Coin Type only
  quantityWei  String?    @map("quantity_wei")

  // Relations
  chestTypeRewards ChestTypeReward[]

  @@map("reward")
  @@schema("public")
}

model ChestSeason {
  // Primary key
  id String @id @default(cuid())

  // Fields
  chestSeasonId String  @unique @map("chest_season_id")
  name          String
  price         Int
  active        Boolean @default(false)

  // Relations
  chestTypes ChestType[]

  // Computed
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("chest_season")
  @@schema("public")
}

model ChestType {
  // Primary key
  id String @id @default(cuid())

  // Fields
  chestTypeId String @unique @map("chest_type_id")
  metadata    Json

  // Relations
  chestSeasonId String?           @map("chest_season_id")
  season        ChestSeason?      @relation(fields: [chestSeasonId], references: [chestSeasonId])
  chests        Chest[]
  vouchers      Voucher[]
  rewards       ChestTypeReward[]

  // Computed
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([createdAt])
  @@index([updatedAt])
  @@map("chest_type")
  @@schema("public")
}

model ChestTypeReward {
  // Primary key
  id String @id @default(cuid())

  // Fields

  // Relations
  chestTypeId String    @map("chest_type_id")
  chestType   ChestType @relation(fields: [chestTypeId], references: [chestTypeId])
  rewardId    String    @map("reward_id")
  reward      Reward    @relation(fields: [rewardId], references: [rewardId])

  @@unique([chestTypeId, rewardId])
  @@map("chest_type_reward")
  @@schema("public")
}

enum ChestStatus {
  AVAILABLE
  CLAIMED
  EXPIRED

  @@map("chest_status_enum")
  @@schema("public")
}

model Chest {
  // Primary key
  id String @id @default(cuid())

  // Fields
  status      ChestStatus @default(AVAILABLE)
  chestTypeId String      @map("chest_type_id")
  chestType   ChestType   @relation(fields: [chestTypeId], references: [chestTypeId])

  // Computed
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  claimedAt DateTime? @map("claimed_at") @db.Timestamptz(6)

  // Relations
  voucher Voucher?

  @@index([status])
  @@index([chestTypeId])
  @@index([createdAt])
  @@index([claimedAt])
  @@map("chest")
  @@schema("public")
}

enum VoucherStatus {
  UNCLAIMED
  CLAIMED
  EXPIRED

  @@map("voucher_status_enum")
  @@schema("public")
}

model Voucher {
  // Primary key
  id String @id @default(cuid())

  // Fields
  gemsValue Int           @map("gems_value")
  nonce     String
  status    VoucherStatus @default(UNCLAIMED)
  claimedAt DateTime?     @map("claimed_at") @db.Timestamptz(6)

  // Relations
  userId      String?   @map("user_id")
  user        User?     @relation(fields: [userId], references: [id])
  chestTypeId String    @map("chest_type_id")
  chestType   ChestType @relation(fields: [chestTypeId], references: [chestTypeId])
  chestId     String    @unique @map("chest_id")
  chest       Chest     @relation(fields: [chestId], references: [id])

  // Migration
  legacyUserProfileId String?      @map("legacy_user_profile_id")
  legacyUserProfile   UserProfile? @relation(fields: [legacyUserProfileId], references: [id], onDelete: Cascade)

  // Computed
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([userId])
  @@index([legacyUserProfileId])
  @@index([status])
  @@index([status, userId])
  @@index([status, legacyUserProfileId])
  @@map("voucher")
  @@schema("public")
}

// Quests.
enum QuestStatus {
  ACTIVE
  ABANDONED
  COMPLETE
  INACTIVE

  @@map("quest_status_enum")
  @@schema("public")
}

model QuestConfig {
  // Primary key
  id String @id @default(cuid())

  // Fields
  questId String @unique @map("quest_id")
  data    Json

  // Computed
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("quest_config")
  @@schema("public")
}

model UserQuest {
  // Primary key
  id String @id @default(cuid())

  // Fields
  questId         String      @map("quest_id")
  questStatus     QuestStatus @map("quest_status")
  isHiddenByUser  Boolean     @default(false) @map("is_hidden_by_user")
  startedAt       DateTime?   @map("started_at") @db.Timestamptz(6)
  completedAt     DateTime?   @map("completed_at") @db.Timestamptz(6)
  ackedAt         DateTime?   @map("acked_at") @db.Timestamptz(6)
  abandonedAt     DateTime?   @map("abandoned_at") @db.Timestamptz(6)
  progressSummary Json?       @map("progress_summary")
  notificationId  String?     @map("notification_id")

  // Relations
  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  // Migration
  legacyUserProfileId String?      @map("legacy_user_profile_id")
  legacyUserProfile   UserProfile? @relation(fields: [legacyUserProfileId], references: [id], onDelete: Cascade)

  // Computed
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([userId, questId])
  @@unique([legacyUserProfileId, questId])
  @@index([userId])
  @@index([legacyUserProfileId])
  @@index([questStatus, userId])
  @@index([questStatus, legacyUserProfileId])
  @@index([questStatus, questId])
  @@index([questStatus, questId, completedAt])
  @@map("user_quest")
  @@schema("public")
}

model QuestStat {
  // Primary key
  id String @id @default(cuid())

  // Fields
  questId String @unique @map("quest_id")
  data    Json

  // Computed
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("quest_stat")
  @@schema("public")
}

view Transaction {
  id              String   @id
  chainId         Int      @map("chain_id")
  blockNumber     Decimal  @map("block_number") @db.Decimal
  blockTimestamp  DateTime @map("block_timestamp")
  transactionHash String   @map("transaction_hash")
  fromAddress     String   @map("from_address")
  toAddress       String   @map("to_address")
  value           Decimal? @db.Decimal

  @@map("transactions")
  @@schema("smart_account")
}

// Ignored models and views added here for diff parity
model RawTransaction {
  key  String @id @map("_key")
  body Json

  @@map("transactions_jsonb")
  @@ignore
  @@schema("smart_account")
}

model RawTreasureAccount {
  key  String @id @map("_key")
  body Json

  @@map("treasure_accounts_jsonb")
  @@ignore
  @@schema("smart_account")
}
