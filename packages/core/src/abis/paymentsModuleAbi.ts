export const paymentsModuleAbi = [
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "facetAddress", type: "address" },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      { internalType: "address", name: "_init", type: "address" },
      { internalType: "bytes", name: "_calldata", type: "bytes" },
    ],
    name: "diamondCut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "owner_", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bool", name: "_shouldPause", type: "bool" }],
    name: "setPause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "AccessControlFacet_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "adminRole",
    outputs: [{ internalType: "bytes32", name: "role_", type: "bytes32" }],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "uint256", name: "index", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32[]", name: "_roles", type: "bytes32[]" },
      { internalType: "address[]", name: "_accounts", type: "address[]" },
    ],
    name: "grantRoles",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "_facetId", type: "bytes32" }],
    name: "isInitialized",
    outputs: [{ internalType: "bool", name: "isInitialized_", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_guildTokenImplementationAddress",
        type: "address",
      },
    ],
    name: "GuildManager_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "acceptInvitation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
      { internalType: "address", name: "_user", type: "address" },
      { internalType: "uint8", name: "_memberLevel", type: "uint8" },
    ],
    name: "adjustMemberLevel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "areContractsSet",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
      { internalType: "address[]", name: "_users", type: "address[]" },
      { internalType: "bool[]", name: "_isAdmins", type: "bool[]" },
    ],
    name: "changeGuildAdmins",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
      { internalType: "address", name: "_newOwner", type: "address" },
    ],
    name: "changeGuildOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
    ],
    name: "createGuild",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
      { internalType: "address", name: "_user", type: "address" },
    ],
    name: "getGuildMemberInfo",
    outputs: [
      {
        components: [
          {
            internalType: "enum GuildUserStatus",
            name: "userStatus",
            type: "uint8",
          },
          { internalType: "uint64", name: "timeUserJoined", type: "uint64" },
          { internalType: "uint8", name: "memberLevel", type: "uint8" },
        ],
        internalType: "struct GuildUserInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
      { internalType: "address", name: "_user", type: "address" },
    ],
    name: "getGuildMemberStatus",
    outputs: [
      { internalType: "enum GuildUserStatus", name: "", type: "uint8" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
    ],
    name: "getGuildOrganizationInfo",
    outputs: [
      {
        components: [
          { internalType: "uint32", name: "guildIdCur", type: "uint32" },
          {
            internalType: "enum GuildCreationRule",
            name: "creationRule",
            type: "uint8",
          },
          { internalType: "uint8", name: "maxGuildsPerUser", type: "uint8" },
          {
            internalType: "uint32",
            name: "timeoutAfterLeavingGuild",
            type: "uint32",
          },
          { internalType: "address", name: "tokenAddress", type: "address" },
          {
            internalType: "enum MaxUsersPerGuildRule",
            name: "maxUsersPerGuildRule",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "maxUsersPerGuildConstant",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "requireTreasureTagForGuilds",
            type: "bool",
          },
          {
            internalType: "address",
            name: "customGuildManagerAddress",
            type: "address",
          },
        ],
        internalType: "struct GuildOrganizationInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "getGuildStatus",
    outputs: [{ internalType: "enum GuildStatus", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_account", type: "address" },
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "grantGuildAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_account", type: "address" },
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "grantGuildTerminator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "guildDescription",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "guildName",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "guildOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "guildSymbolInfo",
    outputs: [
      { internalType: "string", name: "_symbolImageData", type: "string" },
      { internalType: "bool", name: "_isSymbolOnChain", type: "bool" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
    ],
    name: "guildTokenAddress",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "guildTokenImplementation",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint8", name: "_maxGuildsPerUser", type: "uint8" },
      {
        internalType: "uint32",
        name: "_timeoutAfterLeavingGuild",
        type: "uint32",
      },
      {
        internalType: "enum GuildCreationRule",
        name: "_guildCreationRule",
        type: "uint8",
      },
      {
        internalType: "enum MaxUsersPerGuildRule",
        name: "_maxUsersPerGuildRule",
        type: "uint8",
      },
      {
        internalType: "uint32",
        name: "_maxUsersPerGuildConstant",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_customGuildManagerAddress",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_requireTreasureTagForGuilds",
        type: "bool",
      },
    ],
    name: "initializeForOrganization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
      { internalType: "address[]", name: "_users", type: "address[]" },
    ],
    name: "inviteUsers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "isValidGuild",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
      { internalType: "address[]", name: "_users", type: "address[]" },
    ],
    name: "kickOrRemoveInvitations",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "leaveGuild",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
    ],
    name: "maxUsersForGuild",
    outputs: [{ internalType: "uint32", name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_guildTokenImplementationAddress",
        type: "address",
      },
    ],
    name: "setContracts",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      {
        internalType: "address",
        name: "_customGuildManagerAddress",
        type: "address",
      },
    ],
    name: "setCustomGuildManagerAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      {
        internalType: "enum GuildCreationRule",
        name: "_guildCreationRule",
        type: "uint8",
      },
    ],
    name: "setGuildCreationRule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint8", name: "_maxGuildsPerUser", type: "uint8" },
    ],
    name: "setMaxGuildsPerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      {
        internalType: "enum MaxUsersPerGuildRule",
        name: "_maxUsersPerGuildRule",
        type: "uint8",
      },
      {
        internalType: "uint32",
        name: "_maxUsersPerGuildConstant",
        type: "uint32",
      },
    ],
    name: "setMaxUsersPerGuild",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      {
        internalType: "bool",
        name: "_requireTreasureTagForGuilds",
        type: "bool",
      },
    ],
    name: "setRequireTreasureTagForGuilds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      {
        internalType: "uint32",
        name: "_timeoutAfterLeavingGuild",
        type: "uint32",
      },
    ],
    name: "setTimeoutAfterLeavingGuild",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_treasureTagNFTAddress",
        type: "address",
      },
    ],
    name: "setTreasureTagNFTAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
      { internalType: "string", name: "_reason", type: "string" },
    ],
    name: "terminateGuild",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
      { internalType: "string", name: "_name", type: "string" },
      { internalType: "string", name: "_description", type: "string" },
    ],
    name: "updateGuildInfo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "uint32", name: "_guildId", type: "uint32" },
      { internalType: "string", name: "_symbolImageData", type: "string" },
      { internalType: "bool", name: "_isSymbolOnChain", type: "bool" },
    ],
    name: "updateGuildSymbol",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "address", name: "_user", type: "address" },
    ],
    name: "userCanCreateGuild",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "OrganizationFacet_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_newOrganizationId", type: "bytes32" },
      { internalType: "string", name: "_name", type: "string" },
      { internalType: "string", name: "_description", type: "string" },
    ],
    name: "createOrganization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
    ],
    name: "getOrganizationInfo",
    outputs: [
      {
        components: [
          { internalType: "string", name: "name", type: "string" },
          { internalType: "string", name: "description", type: "string" },
          { internalType: "address", name: "admin", type: "address" },
        ],
        internalType: "struct OrganizationInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "address", name: "_admin", type: "address" },
    ],
    name: "setOrganizationAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      { internalType: "string", name: "_name", type: "string" },
      { internalType: "string", name: "_description", type: "string" },
    ],
    name: "setOrganizationNameAndDescription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gasTokenUSDPriceFeed",
        type: "address",
      },
      { internalType: "address", name: "_magicAddress", type: "address" },
    ],
    name: "PaymentsFacet_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_paymentToken", type: "address" },
      {
        internalType: "uint256",
        name: "_paymentAmountInPricedToken",
        type: "uint256",
      },
      { internalType: "enum PriceType", name: "_priceType", type: "uint8" },
      { internalType: "address", name: "_pricedToken", type: "address" },
    ],
    name: "calculatePaymentAmountByPriceType",
    outputs: [
      { internalType: "uint256", name: "paymentAmount_", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMagicAddress",
    outputs: [
      { internalType: "address", name: "magicAddress_", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_erc20", type: "address" },
      { internalType: "uint8", name: "_decimals", type: "uint8" },
      {
        internalType: "address",
        name: "_pricedInGasTokenAggregator",
        type: "address",
      },
      { internalType: "address", name: "_usdAggregator", type: "address" },
      { internalType: "address[]", name: "_pricedERC20s", type: "address[]" },
      { internalType: "address[]", name: "_priceFeeds", type: "address[]" },
    ],
    name: "initializeERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_paymentToken", type: "address" },
      { internalType: "enum PriceType", name: "_priceType", type: "uint8" },
      { internalType: "address", name: "_pricedERC20", type: "address" },
    ],
    name: "isValidPriceType",
    outputs: [{ internalType: "bool", name: "supported_", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_recipient", type: "address" },
      { internalType: "address", name: "_paymentERC20", type: "address" },
      {
        internalType: "uint256",
        name: "_paymentAmountInPricedToken",
        type: "uint256",
      },
      { internalType: "enum PriceType", name: "_priceType", type: "uint8" },
      { internalType: "address", name: "_pricedERC20", type: "address" },
    ],
    name: "makeERC20PaymentByPriceType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_recipient", type: "address" },
      {
        internalType: "uint256",
        name: "_paymentAmountInPricedToken",
        type: "uint256",
      },
      { internalType: "enum PriceType", name: "_priceType", type: "uint8" },
      { internalType: "address", name: "_pricedERC20", type: "address" },
    ],
    name: "makeGasTokenPaymentByPriceType",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_recipient", type: "address" },
      { internalType: "address", name: "_paymentERC20", type: "address" },
      { internalType: "uint256", name: "_paymentAmount", type: "uint256" },
    ],
    name: "makeStaticERC20Payment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_recipient", type: "address" },
      { internalType: "uint256", name: "_paymentAmount", type: "uint256" },
    ],
    name: "makeStaticGasTokenPayment",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_erc20", type: "address" },
      { internalType: "address", name: "_pricedERC20", type: "address" },
      { internalType: "address", name: "_priceFeed", type: "address" },
    ],
    name: "setERC20PriceFeedForERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_pricedERC20", type: "address" },
      { internalType: "address", name: "_priceFeed", type: "address" },
    ],
    name: "setERC20PriceFeedForGasToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "Emitter_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint64", name: "_emittingId", type: "uint64" }],
    name: "amountToClaim",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint64", name: "_emittingId", type: "uint64" },
      { internalType: "bool", name: "_isApproved", type: "bool" },
    ],
    name: "changeEmittingInstanceApproval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint64", name: "_emittingId", type: "uint64" },
      { internalType: "address", name: "_address", type: "address" },
      { internalType: "bool", name: "_canClaim", type: "bool" },
    ],
    name: "changeEmittingInstanceCanClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint64", name: "_emittingId", type: "uint64" },
      { internalType: "address", name: "_newOwner", type: "address" },
    ],
    name: "changeEmittingInstanceCreator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint64", name: "_emittingId", type: "uint64" },
      {
        internalType: "uint64",
        name: "_emittingFrequencyInSeconds",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "_amountToEmitPerSecond",
        type: "uint256",
      },
    ],
    name: "changeEmittingInstanceFrequencyAndRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint64", name: "_emittingId", type: "uint64" }],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_organizationId", type: "bytes32" },
      {
        internalType: "enum EmittingCollectionType",
        name: "_collectionType",
        type: "uint8",
      },
      { internalType: "address", name: "_collection", type: "address" },
      {
        internalType: "uint64",
        name: "_emittingFrequencyInSeconds",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "_amountToEmitPerSecond",
        type: "uint256",
      },
      { internalType: "uint64", name: "_startTime", type: "uint64" },
      { internalType: "uint64", name: "_endTime", type: "uint64" },
      {
        internalType: "enum EmittingRateChangeBehavior",
        name: "_rateChangeBehavior",
        type: "uint8",
      },
      { internalType: "uint256", name: "_tokenId", type: "uint256" },
      { internalType: "bytes4", name: "_emitFunctionSelector", type: "bytes4" },
    ],
    name: "createEmittingInstance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint64", name: "_emittingId", type: "uint64" }],
    name: "deactivateEmittingInstance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes4", name: "_functionSelector", type: "bytes4" },
    ],
    name: "facetAddress",
    outputs: [
      { internalType: "address", name: "facetAddress_", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      { internalType: "address[]", name: "facetAddresses_", type: "address[]" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_facet", type: "address" }],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "facetFunctionSelectors_",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          { internalType: "address", name: "facetAddress", type: "address" },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes4", name: "_interfaceId", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
] as const;
